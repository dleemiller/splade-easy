# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SpladeEasy

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Document:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Document()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDocument(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Document
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Document
    def DocId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Document
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Document
    def Metadata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KeyValue import KeyValue

            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Document
    def MetadataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Document
    def MetadataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Document
    def TokenIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # Document
    def TokenIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Document
    def TokenIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Document
    def TokenIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Document
    def Weights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # Document
    def WeightsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Document
    def WeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Document
    def WeightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0


def DocumentStart(builder):
    builder.StartObject(5)


def Start(builder):
    return DocumentStart(builder)


def DocumentAddDocId(builder, docId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(docId), 0)


def AddDocId(builder, docId):
    return DocumentAddDocId(builder, docId)


def DocumentAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)


def AddText(builder, text):
    return DocumentAddText(builder, text)


def DocumentAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0
    )


def AddMetadata(builder, metadata):
    return DocumentAddMetadata(builder, metadata)


def DocumentStartMetadataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartMetadataVector(builder, numElems):
    return DocumentStartMetadataVector(builder, numElems)


def DocumentAddTokenIds(builder, tokenIds):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenIds), 0
    )


def AddTokenIds(builder, tokenIds):
    return DocumentAddTokenIds(builder, tokenIds)


def DocumentStartTokenIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartTokenIdsVector(builder, numElems):
    return DocumentStartTokenIdsVector(builder, numElems)


def DocumentAddWeights(builder, weights):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(weights), 0
    )


def AddWeights(builder, weights):
    return DocumentAddWeights(builder, weights)


def DocumentStartWeightsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartWeightsVector(builder, numElems):
    return DocumentStartWeightsVector(builder, numElems)


def DocumentEnd(builder):
    return builder.EndObject()


def End(builder):
    return DocumentEnd(builder)
