# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SpladeEasy

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Document:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Document()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDocument(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Document
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Document
    def DocId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Document
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Document
    def Metadata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KeyValue import KeyValue

            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Document
    def MetadataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Document
    def MetadataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Document
    def SparseVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TokenWeight import TokenWeight

            obj = TokenWeight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Document
    def SparseVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Document
    def SparseVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0


def DocumentStart(builder):
    builder.StartObject(4)


def Start(builder):
    return DocumentStart(builder)


def DocumentAddDocId(builder, docId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(docId), 0)


def AddDocId(builder, docId):
    return DocumentAddDocId(builder, docId)


def DocumentAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)


def AddText(builder, text):
    return DocumentAddText(builder, text)


def DocumentAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0
    )


def AddMetadata(builder, metadata):
    return DocumentAddMetadata(builder, metadata)


def DocumentStartMetadataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartMetadataVector(builder, numElems):
    return DocumentStartMetadataVector(builder, numElems)


def DocumentAddSparseVector(builder, sparseVector):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(sparseVector), 0
    )


def AddSparseVector(builder, sparseVector):
    return DocumentAddSparseVector(builder, sparseVector)


def DocumentStartSparseVectorVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartSparseVectorVector(builder, numElems):
    return DocumentStartSparseVectorVector(builder, numElems)


def DocumentEnd(builder):
    return builder.EndObject()


def End(builder):
    return DocumentEnd(builder)
