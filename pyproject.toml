[project]
name = "splade-easy"
version = "0.1.0"
description = "Simple retriever for SPLADE encodings"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "flatbuffers>=25.9.23",
    "numba>=0.62.1",
    "numpy>=2.3.4",
    "rich>=14.2.0",
    "sentence-transformers>=5.1.2",
]

[project.scripts]
ingest-dataset = "splade_easy.ingest.datasets:main"
reshard = "splade_easy.reshard:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-benchmark>=5.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/splade_easy"]

[dependency-groups]
datasets = [
    "datasets>=4.3.0",
    "pyyaml>=6.0.3",
]
dev = [
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.14.2",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "UP",     # pyupgrade
]
ignore = [
    "E501",   # line too long (handled by formatter)
]

[tool.ruff.lint.isort]
known-first-party = ["splade_easy"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/splade_easy"]
omit = [
    "*/tests/*",
    "*/SpladeEasy/*",  # Generated FlatBuffers code
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
