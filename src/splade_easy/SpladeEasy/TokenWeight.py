# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SpladeEasy

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class TokenWeight:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TokenWeight()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTokenWeight(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # TokenWeight
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TokenWeight
    def TokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TokenWeight
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0


def TokenWeightStart(builder):
    builder.StartObject(2)


def Start(builder):
    return TokenWeightStart(builder)


def TokenWeightAddTokenId(builder, tokenId):
    builder.PrependUint32Slot(0, tokenId, 0)


def AddTokenId(builder, tokenId):
    return TokenWeightAddTokenId(builder, tokenId)


def TokenWeightAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)


def AddWeight(builder, weight):
    return TokenWeightAddWeight(builder, weight)


def TokenWeightEnd(builder):
    return builder.EndObject()


def End(builder):
    return TokenWeightEnd(builder)
